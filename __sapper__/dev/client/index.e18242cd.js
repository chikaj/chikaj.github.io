import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, j as add_location, k as insert_dev, l as append_dev, n as noop } from './client.b356729b.js';

var successkid = "/client/465898c830bb9d2c.jpg";

/* src/routes/index.svelte generated by Svelte v3.31.2 */
const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let h2;
	let t1;
	let t2;
	let span0;
	let t3;
	let t4;
	let span1;
	let t5;
	let t6;
	let span2;
	let t7;
	let span3;
	let t8;
	let span4;
	let t9;
	let span5;
	let t10;
	let span6;
	let t11;

	const block = {
		c: function create() {
			t0 = space();
			h2 = element("h2");
			t1 = text("Nate Currit");
			t2 = space();
			span0 = element("span");
			t3 = text("Affiliation");
			t4 = space();
			span1 = element("span");
			t5 = text("Bio");
			t6 = space();
			span2 = element("span");
			t7 = text("CV\n");
			span3 = element("span");
			t8 = text("Research\n");
			span4 = element("span");
			t9 = text("Teaching\n");
			span5 = element("span");
			t10 = text("Presentations\n");
			span6 = element("span");
			t11 = text("Resources");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-5p0wg0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Nate Currit");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			span0 = claim_element(nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t3 = claim_text(span0_nodes, "Affiliation");
			span0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			span1 = claim_element(nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t5 = claim_text(span1_nodes, "Bio");
			span1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			span2 = claim_element(nodes, "SPAN", {});
			children(span2).forEach(detach_dev);
			t7 = claim_text(nodes, "CV\n");
			span3 = claim_element(nodes, "SPAN", {});
			children(span3).forEach(detach_dev);
			t8 = claim_text(nodes, "Research\n");
			span4 = claim_element(nodes, "SPAN", {});
			children(span4).forEach(detach_dev);
			t9 = claim_text(nodes, "Teaching\n");
			span5 = claim_element(nodes, "SPAN", {});
			children(span5).forEach(detach_dev);
			t10 = claim_text(nodes, "Presentations\n");
			span6 = claim_element(nodes, "SPAN", {});
			children(span6).forEach(detach_dev);
			t11 = claim_text(nodes, "Resources");
			this.h();
		},
		h: function hydrate() {
			document.title = "chikaj";
			add_location(h2, file, 42, 0, 496);
			add_location(span0, file, 44, 0, 518);
			add_location(span1, file, 46, 0, 544);
			add_location(span2, file, 47, 0, 561);
			add_location(span3, file, 48, 0, 577);
			add_location(span4, file, 49, 0, 599);
			add_location(span5, file, 50, 0, 621);
			add_location(span6, file, 51, 0, 648);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, span0, anchor);
			append_dev(span0, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, span2, anchor);
			insert_dev(target, t7, anchor);
			insert_dev(target, span3, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, span4, anchor);
			insert_dev(target, t9, anchor);
			insert_dev(target, span5, anchor);
			insert_dev(target, t10, anchor);
			insert_dev(target, span6, anchor);
			insert_dev(target, t11, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(span0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(span1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(span2);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(span3);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(span4);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(span5);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(span6);
			if (detaching) detach_dev(t11);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ successkid });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZTE4MjQyY2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ub2RlX21vZHVsZXMvaW1hZ2VzL3N1Y2Nlc3NraWQuanBnIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiL2NsaWVudC80NjU4OThjODMwYmI5ZDJjLmpwZ1wiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUJBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
